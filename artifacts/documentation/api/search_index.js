var search_data = {
    'index': {
        'searchIndex': ["icecave","icecave\\flax","icecave\\flax\\exception","icecave\\flax\\message","icecave\\flax\\serialization","icecave\\flax\\exception\\decodeexception","icecave\\flax\\exception\\encodeexception","icecave\\flax\\hessianclient","icecave\\flax\\hessianclientfactory","icecave\\flax\\hessianclientinterface","icecave\\flax\\message\\decoder","icecave\\flax\\message\\decoderstate","icecave\\flax\\message\\encoder","icecave\\flax\\message\\hessianconstants","icecave\\flax\\serialization\\decoder","icecave\\flax\\serialization\\decoderstate","icecave\\flax\\serialization\\encoder","icecave\\flax\\serialization\\hessianconstants","icecave\\flax\\serialization\\utility","icecave\\flax\\exception\\decodeexception::__construct","icecave\\flax\\exception\\encodeexception::__construct","icecave\\flax\\hessianclient::__construct","icecave\\flax\\hessianclient::__call","icecave\\flax\\hessianclient::invoke","icecave\\flax\\hessianclientfactory::connect","icecave\\flax\\hessianclientinterface::__call","icecave\\flax\\hessianclientinterface::invoke","icecave\\flax\\message\\encoder::__construct","icecave\\flax\\message\\encoder::reset","icecave\\flax\\message\\encoder::encodeversion","icecave\\flax\\message\\encoder::encodecall","icecave\\flax\\serialization\\decoder::__construct","icecave\\flax\\serialization\\decoder::reset","icecave\\flax\\serialization\\decoder::feed","icecave\\flax\\serialization\\decoder::finalize","icecave\\flax\\serialization\\decoder::handlestringchunkdata","icecave\\flax\\serialization\\decoder::handlestringchunkfinaldata","icecave\\flax\\serialization\\decoder::handlestringchunkcontinuation","icecave\\flax\\serialization\\decoder::handlebinarychunkdata","icecave\\flax\\serialization\\decoder::handlebinarychunkfinaldata","icecave\\flax\\serialization\\decoder::handlebinarychunkcontinuation","icecave\\flax\\serialization\\decoder::handleint32","icecave\\flax\\serialization\\decoder::handleint64","icecave\\flax\\serialization\\decoder::handletimestampmilliseconds","icecave\\flax\\serialization\\decoder::handletimestampminutes","icecave\\flax\\serialization\\decoder::handlenextcollectionelement","icecave\\flax\\serialization\\decoder::handlecollectiontype","icecave\\flax\\serialization\\decoder::appendint64data","icecave\\flax\\serialization\\encoder::__construct","icecave\\flax\\serialization\\encoder::reset","icecave\\flax\\serialization\\encoder::encode","icecave\\flax\\serialization\\encoder::encodebinary","icecave\\flax\\serialization\\encoder::encodetimestamp","icecave\\flax\\serialization\\utility::isbigendian","icecave\\flax\\serialization\\utility::convertendianness","icecave\\flax\\serialization\\utility::packint64","icecave\\flax\\serialization\\utility::unpackint64","icecave\\flax\\serialization\\utility::bytetounsigned","icecave\\flax\\serialization\\utility::bytetosigned"],
        'info': [["Icecave","","Icecave.html","","",3],["Icecave\\Flax","","Icecave\/Flax.html","","",3],["Icecave\\Flax\\Exception","","Icecave\/Flax\/Exception.html","","",3],["Icecave\\Flax\\Message","","Icecave\/Flax\/Message.html","","",3],["Icecave\\Flax\\Serialization","","Icecave\/Flax\/Serialization.html","","",3],["DecodeException","Icecave\\Flax\\Exception","Icecave\/Flax\/Exception\/DecodeException.html"," < RuntimeException","Indicates an error while decoding a serialized Hessian",1],["EncodeException","Icecave\\Flax\\Exception","Icecave\/Flax\/Exception\/EncodeException.html"," < LogicException","Indicates an error while encoding a value.",1],["HessianClient","Icecave\\Flax","Icecave\/Flax\/HessianClient.html","","",1],["HessianClientFactory","Icecave\\Flax","Icecave\/Flax\/HessianClientFactory.html","","",1],["HessianClientInterface","Icecave\\Flax","Icecave\/Flax\/HessianClientInterface.html","","",1],["Decoder","Icecave\\Flax\\Message","Icecave\/Flax\/Message\/Decoder.html","","",1],["DecoderState","Icecave\\Flax\\Message","Icecave\/Flax\/Message\/DecoderState.html"," < Enumeration","",1],["Encoder","Icecave\\Flax\\Message","Icecave\/Flax\/Message\/Encoder.html","","",1],["HessianConstants","Icecave\\Flax\\Message","Icecave\/Flax\/Message\/HessianConstants.html","","",1],["Decoder","Icecave\\Flax\\Serialization","Icecave\/Flax\/Serialization\/Decoder.html","","Streaming Hessian decoder.",1],["DecoderState","Icecave\\Flax\\Serialization","Icecave\/Flax\/Serialization\/DecoderState.html"," < Enumeration","",1],["Encoder","Icecave\\Flax\\Serialization","Icecave\/Flax\/Serialization\/Encoder.html","","",1],["HessianConstants","Icecave\\Flax\\Serialization","Icecave\/Flax\/Serialization\/HessianConstants.html","","",1],["Utility","Icecave\\Flax\\Serialization","Icecave\/Flax\/Serialization\/Utility.html","","",1],["DecodeException::__construct","Icecave\\Flax\\Exception\\DecodeException","Icecave\/Flax\/Exception\/DecodeException.html#method___construct","(string $message, <a href=\"http:\/\/php.net\/Exception\"><abbr title=\"Exception\">Exception<\/abbr><\/a> $previous = null)","",2],["EncodeException::__construct","Icecave\\Flax\\Exception\\EncodeException","Icecave\/Flax\/Exception\/EncodeException.html#method___construct","(string $message, <a href=\"http:\/\/php.net\/Exception\"><abbr title=\"Exception\">Exception<\/abbr><\/a> $previous = null)","",2],["HessianClient::__construct","Icecave\\Flax\\HessianClient","Icecave\/Flax\/HessianClient.html#method___construct","(string $url, <abbr title=\"Buzz\\Browser\">Browser<\/abbr> $httpBrowser, <a href=\"Icecave\/Flax\/Message\/Encoder.html\"><abbr title=\"Icecave\\Flax\\Message\\Encoder\">Encoder<\/abbr><\/a> $encoder = null, <a href=\"Icecave\/Flax\/Message\/Decoder.html\"><abbr title=\"Icecave\\Flax\\Message\\Decoder\">Decoder<\/abbr><\/a> $decoder = null)","",2],["HessianClient::__call","Icecave\\Flax\\HessianClient","Icecave\/Flax\/HessianClient.html#method___call","(string $name, array $arguments)","Invoke a Hessian operation.",2],["HessianClient::invoke","Icecave\\Flax\\HessianClient","Icecave\/Flax\/HessianClient.html#method_invoke","(string $name, array $arguments = array())","Invoke a Hessian operation.",2],["HessianClientFactory::connect","Icecave\\Flax\\HessianClientFactory","Icecave\/Flax\/HessianClientFactory.html#method_connect","(string $url, string|null $username = null, string $password = &#039;&#039;)","",2],["HessianClientInterface::__call","Icecave\\Flax\\HessianClientInterface","Icecave\/Flax\/HessianClientInterface.html#method___call","(string $name, array $arguments)","Invoke a Hessian operation.",2],["HessianClientInterface::invoke","Icecave\\Flax\\HessianClientInterface","Icecave\/Flax\/HessianClientInterface.html#method_invoke","(string $name, array $arguments = array())","Invoke a Hessian operation.",2],["Encoder::__construct","Icecave\\Flax\\Message\\Encoder","Icecave\/Flax\/Message\/Encoder.html#method___construct","()","",2],["Encoder::reset","Icecave\\Flax\\Message\\Encoder","Icecave\/Flax\/Message\/Encoder.html#method_reset","()","",2],["Encoder::encodeVersion","Icecave\\Flax\\Message\\Encoder","Icecave\/Flax\/Message\/Encoder.html#method_encodeVersion","()","",2],["Encoder::encodeCall","Icecave\\Flax\\Message\\Encoder","Icecave\/Flax\/Message\/Encoder.html#method_encodeCall","(string $methodName, array $arguments)","",2],["Decoder::__construct","Icecave\\Flax\\Serialization\\Decoder","Icecave\/Flax\/Serialization\/Decoder.html#method___construct","()","",2],["Decoder::reset","Icecave\\Flax\\Serialization\\Decoder","Icecave\/Flax\/Serialization\/Decoder.html#method_reset","()","Reset the decoder.",2],["Decoder::feed","Icecave\\Flax\\Serialization\\Decoder","Icecave\/Flax\/Serialization\/Decoder.html#method_feed","(string $buffer)","Feed Hessian data to the decoder.",2],["Decoder::finalize","Icecave\\Flax\\Serialization\\Decoder","Icecave\/Flax\/Serialization\/Decoder.html#method_finalize","()","Finalize decoding and return the decoded value.",2],["Decoder::handleStringChunkData","Icecave\\Flax\\Serialization\\Decoder","Icecave\/Flax\/Serialization\/Decoder.html#method_handleStringChunkData","(integer $byte)","Handle decoding a chunked UTF-8 string.",2],["Decoder::handleStringChunkFinalData","Icecave\\Flax\\Serialization\\Decoder","Icecave\/Flax\/Serialization\/Decoder.html#method_handleStringChunkFinalData","(integer $byte)","Handle decoding the final chunk of a chunked UTF-8",2],["Decoder::handleStringChunkContinuation","Icecave\\Flax\\Serialization\\Decoder","Icecave\/Flax\/Serialization\/Decoder.html#method_handleStringChunkContinuation","(integer $byte)","Handle decoding the first byte after a string chunk.",2],["Decoder::handleBinaryChunkData","Icecave\\Flax\\Serialization\\Decoder","Icecave\/Flax\/Serialization\/Decoder.html#method_handleBinaryChunkData","(integer $byte)","Handle decoding a chunked binary buffer.",2],["Decoder::handleBinaryChunkFinalData","Icecave\\Flax\\Serialization\\Decoder","Icecave\/Flax\/Serialization\/Decoder.html#method_handleBinaryChunkFinalData","(integer $byte)","Handle decoding the final chunk in a chunked binary",2],["Decoder::handleBinaryChunkContinuation","Icecave\\Flax\\Serialization\\Decoder","Icecave\/Flax\/Serialization\/Decoder.html#method_handleBinaryChunkContinuation","(integer $byte)","Handle decoding the first byte after a binary chunk.",2],["Decoder::handleInt32","Icecave\\Flax\\Serialization\\Decoder","Icecave\/Flax\/Serialization\/Decoder.html#method_handleInt32","(integer $byte)","Handle decoding a 32-bit integer.",2],["Decoder::handleInt64","Icecave\\Flax\\Serialization\\Decoder","Icecave\/Flax\/Serialization\/Decoder.html#method_handleInt64","(integer $byte)","Handle decoding a 64-bit integer.",2],["Decoder::handleTimestampMilliseconds","Icecave\\Flax\\Serialization\\Decoder","Icecave\/Flax\/Serialization\/Decoder.html#method_handleTimestampMilliseconds","(integer $byte)","Handle decoding a timestamp in milliseconds.",2],["Decoder::handleTimestampMinutes","Icecave\\Flax\\Serialization\\Decoder","Icecave\/Flax\/Serialization\/Decoder.html#method_handleTimestampMinutes","(integer $byte)","Handle decoding a timestamp in minutes.",2],["Decoder::handleNextCollectionElement","Icecave\\Flax\\Serialization\\Decoder","Icecave\/Flax\/Serialization\/Decoder.html#method_handleNextCollectionElement","(integer $byte)","Handle decoding the end of a variable length collection.",2],["Decoder::handleCollectionType","Icecave\\Flax\\Serialization\\Decoder","Icecave\/Flax\/Serialization\/Decoder.html#method_handleCollectionType","(integer $byte)","Handle decoding a the type of a typed collection.",2],["Decoder::appendInt64Data","Icecave\\Flax\\Serialization\\Decoder","Icecave\/Flax\/Serialization\/Decoder.html#method_appendInt64Data","(integer $byte)","Append 64-bit integer data to the internal buffer.",2],["Encoder::__construct","Icecave\\Flax\\Serialization\\Encoder","Icecave\/Flax\/Serialization\/Encoder.html#method___construct","()","",2],["Encoder::reset","Icecave\\Flax\\Serialization\\Encoder","Icecave\/Flax\/Serialization\/Encoder.html#method_reset","()","",2],["Encoder::encode","Icecave\\Flax\\Serialization\\Encoder","Icecave\/Flax\/Serialization\/Encoder.html#method_encode","(mixed $value)","",2],["Encoder::encodeBinary","Icecave\\Flax\\Serialization\\Encoder","Icecave\/Flax\/Serialization\/Encoder.html#method_encodeBinary","(string $value)","",2],["Encoder::encodeTimestamp","Icecave\\Flax\\Serialization\\Encoder","Icecave\/Flax\/Serialization\/Encoder.html#method_encodeTimestamp","(integer $timestamp)","",2],["Utility::isBigEndian","Icecave\\Flax\\Serialization\\Utility","Icecave\/Flax\/Serialization\/Utility.html#method_isBigEndian","()","",2],["Utility::convertEndianness","Icecave\\Flax\\Serialization\\Utility","Icecave\/Flax\/Serialization\/Utility.html#method_convertEndianness","(string $buffer)","",2],["Utility::packInt64","Icecave\\Flax\\Serialization\\Utility","Icecave\/Flax\/Serialization\/Utility.html#method_packInt64","(integer $value)","",2],["Utility::unpackInt64","Icecave\\Flax\\Serialization\\Utility","Icecave\/Flax\/Serialization\/Utility.html#method_unpackInt64","(string $bytes)","",2],["Utility::byteToUnsigned","Icecave\\Flax\\Serialization\\Utility","Icecave\/Flax\/Serialization\/Utility.html#method_byteToUnsigned","(integer $byte)","",2],["Utility::byteToSigned","Icecave\\Flax\\Serialization\\Utility","Icecave\/Flax\/Serialization\/Utility.html#method_byteToSigned","(integer $byte)","",2]]
    }
}
search_data['index']['longSearchIndex'] = search_data['index']['searchIndex']